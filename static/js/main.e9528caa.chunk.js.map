{"version":3,"sources":["utils/utils.ts","components/Video.tsx","api/api.ts","redux/appReducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","Video","source","useSelector","state","app","data","url","poster","media","useRef","player","volumeInput","useState","currentVideoTime","setCurrentVideoTime","duration","setDuration","slider","setSlider","progress","setProgress","progressDuration","setProgressDuration","paused","setPaused","volume","setVolume","muted","setMuted","playPause","current","ended","play","pause","controllersClassName","document","fullscreenElement","className","ref","src","onTimeUpdate","time","Math","round","currentTime","onLoadedMetadata","onClick","onPause","onPlay","onVolumeChange","e","currentTarget","id","value","max","min","type","step","onChange","valueAsNumber","onMouseUp","onMouseDown","xmlns","width","height","viewBox","d","onMouseOver","style","display","onMouseOut","data-title","exitFullscreen","requestFullscreen","videoAPI","axios","get","initState","appInitStatus","loadDataStatus","setAppInitStatus","setLoadDataStatus","App","dispatch","useDispatch","init","useEffect","then","res","catch","err","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e9528caa.chunk.js","sourcesContent":["export const formatTime = (timeInSeconds: number) => {\r\n    const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n    return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n    };\r\n};","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport './Video.css'\r\nimport {formatTime} from \"../utils/utils\";\r\n\r\nexport function Video() {\r\n    const source = useSelector<AppRootStateType, string>(state => state.app.data[0].url)\r\n    const poster = useSelector<AppRootStateType, string>(state => state.app.data[1].url)\r\n    const media = useRef<HTMLVideoElement>(null!)\r\n    const player = useRef<HTMLDivElement>(null!)\r\n    const volumeInput = useRef<HTMLInputElement>(null!)\r\n\r\n    const [currentVideoTime, setCurrentVideoTime] = useState({minutes: '00', seconds: '00'})\r\n    const [duration, setDuration] = useState({minutes: '00', seconds: '00'})\r\n    const [slider, setSlider] = useState(0)\r\n    const [progress, setProgress] = useState(0)\r\n    const [progressDuration, setProgressDuration] = useState(0)\r\n    const [paused, setPaused] = useState(true)\r\n    const [volume, setVolume] = useState(1)\r\n    const [muted, setMuted] = useState(false)\r\n\r\n    const playPause = () => {\r\n        if (media.current.paused || media.current.ended) {\r\n            media.current.play()\r\n        } else {\r\n            media.current.pause()\r\n        }\r\n    }\r\n\r\n    const stopVideo = () => {\r\n        media.current.pause()\r\n        media.current.currentTime = 0\r\n        setPaused(true)\r\n    }\r\n\r\n    const onTimeUpdate = () => {\r\n        const time = formatTime(Math.round(media.current.currentTime))\r\n        setCurrentVideoTime(time)\r\n        setSlider(media.current.currentTime)\r\n        setProgress(media.current.currentTime)\r\n    }\r\n\r\n    const setVideo = () => {\r\n        const time = formatTime(Math.round(media.current.duration))\r\n        setProgressDuration(Math.round(media.current.duration))\r\n        setDuration(time)\r\n        setPaused(media.current.paused)\r\n        setVolume(media.current.volume)\r\n        setMuted(media.current.muted)\r\n    }\r\n\r\n    const onChangeSlider = (e: ChangeEvent<HTMLInputElement>) => {\r\n        media.current.currentTime = e.currentTarget.valueAsNumber\r\n        setSlider(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const onSliderMouseDown = () => {\r\n        media.current.pause()\r\n    }\r\n\r\n    const onSliderMouseUp = () => {\r\n        media.current.play()\r\n    }\r\n\r\n    const onChangeVolume = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (media.current.muted) {\r\n            media.current.muted = false\r\n            setMuted(false)\r\n        }\r\n        media.current.volume = e.currentTarget.valueAsNumber\r\n        setVolume(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        media.current.muted = !media.current.muted\r\n        setMuted(!muted)\r\n    }\r\n\r\n    const toggleFullScreen = () => {\r\n        if (document.fullscreenElement) {\r\n            document.exitFullscreen()\r\n        } else {\r\n            player.current.requestFullscreen()\r\n        }\r\n    }\r\n\r\n    const onVolumeMouseOver = () => {\r\n        volumeInput.current.style.display = 'block'\r\n    }\r\n\r\n    const onVolumeMouseOut = () => {\r\n        volumeInput.current.style.display = 'none'\r\n    }\r\n\r\n    const controllersClassName = document.fullscreenElement ? `video-controls fsmode` : `video-controls`\r\n\r\n    const volumeIcon = () => {\r\n        if (volume === 0 || muted) {\r\n            return <svg id=\"volume-mute\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                <path\r\n                    d=\"M12 3.984v4.219l-2.109-2.109zM4.266 3l16.734 16.734-1.266 1.266-2.063-2.063q-1.547 1.313-3.656 1.828v-2.063q1.172-0.328 2.25-1.172l-4.266-4.266v6.75l-5.016-5.016h-3.984v-6h4.734l-4.734-4.734zM18.984 12q0-2.391-1.383-4.219t-3.586-2.484v-2.063q3.047 0.656 5.016 3.117t1.969 5.648q0 2.203-1.031 4.172l-1.5-1.547q0.516-1.266 0.516-2.625zM16.5 12q0 0.422-0.047 0.609l-2.438-2.438v-2.203q1.031 0.516 1.758 1.688t0.727 2.344z\"/>\r\n            </svg>\r\n        } else if (volume < 0.5) {\r\n            return <svg id=\"volume-low\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                <path\r\n                    d=\"M5.016 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6zM18.516 12q0 2.766-2.531 4.031v-8.063q1.031 0.516 1.781 1.711t0.75 2.32z\"/>\r\n            </svg>\r\n        } else {\r\n            return <svg id=\"volume-high\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                <path\r\n                    d=\"M14.016 3.234q3.047 0.656 5.016 3.117t1.969 5.648-1.969 5.648-5.016 3.117v-2.063q2.203-0.656 3.586-2.484t1.383-4.219-1.383-4.219-3.586-2.484v-2.063zM16.5 12q0 2.813-2.484 4.031v-8.063q1.031 0.516 1.758 1.688t0.727 2.344zM3 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6z\"/>\r\n            </svg>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'player'} ref={player}>\r\n            <video className={'video'} ref={media} src={source} poster={poster} onTimeUpdate={onTimeUpdate}\r\n                   onLoadedMetadata={setVideo} onClick={playPause} onPause={() => {setPaused(true)}} onPlay={() => setPaused(false)} onVolumeChange={(e) => {\r\n                setVolume(e.currentTarget.volume)\r\n                setMuted(false)\r\n            }}>\r\n                Your browser doesn't support HTML5 video.\r\n            </video>\r\n            <div className={controllersClassName}>\r\n                <div className=\"video-progress\">\r\n                    <progress id=\"progress-bar\" value={progress} max={progressDuration}></progress>\r\n                    <input className=\"seek\" id=\"seek\" value={slider} min=\"0\" type=\"range\" step=\"1\"\r\n                           max={progressDuration} onChange={onChangeSlider} onMouseUp={onSliderMouseUp}\r\n                           onMouseDown={onSliderMouseDown}/>\r\n                </div>\r\n                <div className={'bottom-video-controls'}>\r\n                    <div className={'video-controls-left'}>\r\n                        <button className={'play-pause'} onClick={playPause}>\r\n                            {paused\r\n                                ?\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                    <path d=\"M3 22v-20l18 10-18 10z\"/>\r\n                                </svg>\r\n                                :\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                    <path d=\"M11 22h-4v-20h4v20zm6-20h-4v20h4v-20z\"/>\r\n                                </svg>\r\n                            }\r\n                        </button>\r\n                        <button className={'stop'} onClick={stopVideo}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                <path d=\"M2 2h20v20h-20z\"/>\r\n                            </svg>\r\n                        </button>\r\n                        <div className={'time'}>\r\n                            <time>{`${currentVideoTime.minutes}:${currentVideoTime.seconds} / ${duration.minutes}:${duration.seconds}`}</time>\r\n                        </div>\r\n                    </div>\r\n                    <div className={'video-controls-right'} onMouseOver={onVolumeMouseOver} onMouseOut={onVolumeMouseOut}>\r\n                        <div className=\"volume-controls\">\r\n                            <button data-title=\"Mute (m)\" className=\"volume-button\" id=\"volume-button\"\r\n                                    onClick={toggleMute} >\r\n                                {volumeIcon()}\r\n                            </button>\r\n                            <input ref={volumeInput} className=\"volume\" id=\"volume\" type=\"range\" value={volume} max=\"1\" min=\"0\"\r\n                                   step=\"0.01\" onChange={onChangeVolume}/>\r\n                        </div>\r\n                        <button className={'full-screen'} onClick={toggleFullScreen}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                <path\r\n                                    d=\"M24 9h-4v-5h-5v-4h9v9zm-9 15v-4h5v-5h4v9h-9zm-15-9h4v5h5v4h-9v-9zm9-15v4h-5v5h-4v-9h9z\"/>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nexport type DataType = {\r\n    name: string\r\n    format: string\r\n    source: string\r\n    url: string\r\n}\r\ntype ResponseType = {\r\n    status: string,\r\n    data: DataType[]\r\n}\r\n\r\nexport const videoAPI = {\r\n    getData() {\r\n        return axios.get<ResponseType>('data.json')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {DataType, videoAPI} from \"../api/api\";\r\n\r\ntype InitStateType = typeof initState\r\nexport type StatusType = 'loading' | 'idle' | 'success' | 'failed'\r\ntype FetchDataType = ReturnType<typeof fetchData>\r\ntype SetAppInitStatus = ReturnType<typeof setAppInitStatus>\r\ntype SetLoadDataStatus = ReturnType<typeof setLoadDataStatus>\r\ntype ActionsType = FetchDataType | SetAppInitStatus | SetLoadDataStatus\r\n\r\nconst initState = {\r\n    data: [] as DataType[],\r\n    appInitStatus: 'idle' as StatusType,\r\n    loadDataStatus: 'idle' as StatusType\r\n}\r\n\r\nexport const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {\r\n    switch(action.type) {\r\n        case 'app/FETCH-DATA': {\r\n            return {\r\n                ...state, data: {...action.data}\r\n            }\r\n        }\r\n        case \"app/SET-INIT-STATUS\": {\r\n            return {\r\n                ...state, appInitStatus: action.appInitStatus\r\n            }\r\n        }\r\n        case \"app/SET-LOAD-DATA-STATUS\": {\r\n            return {\r\n                ...state, loadDataStatus: action.loadDataStatus\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const fetchData = (data: DataType[]) => {\r\n    return {type: 'app/FETCH-DATA', data} as const\r\n}\r\nexport const setAppInitStatus = (appInitStatus: StatusType) => {\r\n    return {type: 'app/SET-INIT-STATUS', appInitStatus} as const\r\n}\r\nexport const setLoadDataStatus = (loadDataStatus: StatusType) => {\r\n    return {type: 'app/SET-LOAD-DATA-STATUS', loadDataStatus} as const\r\n}\r\n\r\nexport const fetchDataTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppInitStatus('loading'))\r\n    dispatch(setLoadDataStatus('loading'))\r\n    videoAPI.getData()\r\n        .then(res => {\r\n            dispatch(fetchData(res.data.data))\r\n            dispatch(setLoadDataStatus('success'))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setLoadDataStatus('failed'))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitStatus('success'))\r\n        })\r\n}\r\n\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Video} from \"./components/Video\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchDataTC, StatusType} from \"./redux/appReducer\";\nimport {AppRootStateType} from \"./redux/store\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const init = useSelector<AppRootStateType, StatusType>(state => state.app.appInitStatus)\n\n    useEffect(() => {\n        dispatch(fetchDataTC())\n    }, [])\n\n    if (init === 'loading') {\n        return <div>Loading</div>\n    }\n\n    return (\n        <div className={'app'}>\n            {init === 'success' && <Video/>}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {appReducer} from \"./appReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}